/*
 * Mandatory Assignemnt 1
 *
 * Mandotory Assignment 1
 *
 * API version: 0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

// JSON parsing inspiration from https://www.alexedwards.net/blog/how-to-properly-parse-a-json-request-body

package api

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"

	"github.com/gregerssr/DISYS_MandatoryExercise1/rest/model"
	"github.com/gregerssr/DISYS_MandatoryExercise1/rest/storage"
)

func RequestToCourse(r *http.Request) (model.Course, error) {
	var course model.Course
	err := json.NewDecoder(r.Body).Decode(&course)
	if err != nil {
		return course, err
	}
	return course, nil
}

func AddCourse(w http.ResponseWriter, r *http.Request) {
	course, err := RequestToCourse(r)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
	} else if !storage.InsertCourse(course) {
		http.Error(w, "Course exists", http.StatusForbidden)
	} else {
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		w.WriteHeader(http.StatusCreated)
	}
}

func GetCourseById(w *http.ResponseWriter, r *http.Request) *model.Course {
	idField := mux.Vars(r)["course_id"]
	id, err := strconv.Atoi(idField)
	if err != nil {
		http.Error(*w, "Invalid or missing ID", http.StatusBadRequest)
		return nil
	}
	course, err := storage.GetCourse(int64(id))
	if err != nil {
		http.Error(*w, "There is no course with the specified ID", http.StatusNotFound)
		return nil
	}
	return &course
}

func CourseCourseIdGet(w http.ResponseWriter, r *http.Request) {
	course := GetCourseById(&w, r)
	if course != nil {
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(*course)
	}
}

func CourseCourseIdSatisfactionRatingGet(w http.ResponseWriter, r *http.Request) {
	course := GetCourseById(&w, r)
	if course != nil {
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(course.SatisfactionScore)
	}
}

func CourseCourseIdTeachersGet(w http.ResponseWriter, r *http.Request) {
	course := GetCourseById(&w, r)
	if course != nil {
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(course.Teachers)
	}
}

func DeleteCourse(w http.ResponseWriter, r *http.Request) {
	idField := mux.Vars(r)["course_id"]
	courseId, err := strconv.Atoi(idField)
	if err != nil {
		http.Error(w, "Illegal ID", http.StatusBadRequest)
	} else if !storage.DeleteCourse(int64(courseId)) {
		http.Error(w, "ID doesn't exist", http.StatusNotFound)
	} else {
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		w.WriteHeader(http.StatusOK)
	}
}

func UpdateCourse(w http.ResponseWriter, r *http.Request) {
	course, err := RequestToCourse(r)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
	} else if !storage.UpdateCourse(course) {
		http.Error(w, "Course does not exist", http.StatusForbidden)
	} else {
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		w.WriteHeader(http.StatusOK)
	}
}
