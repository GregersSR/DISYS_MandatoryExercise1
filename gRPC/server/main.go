package main

import (
	"context"
	"fmt"
	"log"
	"net"

	pf "github.com/gregerssr/DISYS_MandatoryExercise1/gRPC/protofiles"
	"google.golang.org/grpc"
)

const (
	port = ":50051"
)

// Must implement the CourseServiceServer interface autogenerated in 'course_grpc.pb.go'
type Server struct {
	Courses map[int64]pf.Course

	pf.UnimplementedCourseServiceServer
}

func (s *Server) Init() {
	s.Courses = make(map[int64]pf.Course)
}

func (s *Server) AddCourse(ctx context.Context, in *pf.Course) (*pf.IsSuccess, error) {
	log.Printf("Recived AddCourse request for %v: %s", in.Id, in.Title)

	if _, contains := s.Courses[in.Id]; contains {
		return &pf.IsSuccess{IsSuccess: false}, fmt.Errorf("%v already exists under the name %s", in.Id, in.Title)
	}

	s.Courses[in.Id] = *in
	return &pf.IsSuccess{IsSuccess: true}, nil
}

func (s *Server) GetCourse(ctx context.Context, in *pf.CourseID) (*pf.Course, error) {
	log.Printf("Recieved GetCourse request for %v", in.Id)

	course := pf.Course{
		Id:                s.Courses[in.Id].Id,
		Title:             s.Courses[in.Id].Title,
		Teachers:          s.Courses[in.Id].Teachers,
		Ects:              s.Courses[in.Id].Ects,
		SatisfactionScore: s.Courses[in.Id].SatisfactionScore,
	}

	return &course, nil
}

func (s *Server) UpdateCourse(ctx context.Context, in *pf.Course) (*pf.IsSuccess, error) {
	log.Printf("Recieved UpdateCourse request for %v: %s", in.Id, in.Title)

	if _, contains := s.Courses[in.Id]; !contains {
		return &pf.IsSuccess{IsSuccess: false}, fmt.Errorf("%v does not exist. Please add it", in.Id)
	}

	s.Courses[in.Id] = *in
	return &pf.IsSuccess{IsSuccess: true}, nil
}

func (s *Server) DeleteCourse(ctx context.Context, in *pf.CourseID) (*pf.IsSuccess, error) {
	log.Printf("Recieved DeleteCourse request for %v", in.Id)

	if _, contains := s.Courses[in.Id]; !contains {
		return &pf.IsSuccess{IsSuccess: false}, fmt.Errorf("%v does not exist, so cannot delete it", in.Id)
	}

	delete(s.Courses, in.Id)
	return &pf.IsSuccess{IsSuccess: true}, nil
}

func (s *Server) GetCourseTeachers(ctx context.Context, in *pf.CourseID) (*pf.CourseTeachers, error) {
	log.Printf("Recieved GetCourseTeachers request for %v", in.Id)

	if _, contains := s.Courses[in.Id]; !contains {
		return nil, fmt.Errorf("%v does not exist", in.Id)
	}

	teachers := s.Courses[in.Id].Teachers
	return &pf.CourseTeachers{Teachers: teachers}, nil
}

func (s *Server) GetCourseSatisfactionRating(ctx context.Context, in *pf.CourseID) (*pf.CourseSatisfactionRating, error) {
	log.Printf("Recieved GetCourseSatisfactionRating request for %v", in.Id)

	if _, contains := s.Courses[in.Id]; !contains {
		return nil, fmt.Errorf("%v does not exist", in.Id)
	}

	satisfactionRating := s.Courses[in.Id].SatisfactionScore
	return &pf.CourseSatisfactionRating{SatisfactionRating: satisfactionRating}, nil
}

func main() {
	lis, err := net.Listen("tcp", port)
	if err != nil {
		log.Fatalf("Failed to listen: %v", err)
	}
	s := grpc.NewServer()

	courseServer := Server{}
	courseServer.Init()

	pf.RegisterCourseServiceServer(s, &courseServer)
	log.Printf("server listening at %v", lis.Addr())
	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}
